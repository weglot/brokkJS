/*! brokkjs 2019-08-26 */

!function(r,n,e){var t="brokkJS";function i(i,n){this.element=i,this._name=t,this._defaults=r.fn.brokk.defaults;var o={},s=["toUpdateElements","triggerElements","toFireSuccessElements"];r.each(this._defaults,function(n,t){if("function"!=typeof t){var e=n.replace(/([a-z])([A-Z])/g,"$1-$2").toLowerCase();t=r(i).data("brokk-"+e),-1!==s.indexOf(n)&&"string"==typeof t&&(t=t.split(",").map(function(n){return"this"===n.trim()?i:n})),o[n]=t}}),this.options=r.extend({},this._defaults,o),this.options=r.extend({},this.options,n),this.init()}r.extend(i.prototype,{init:function(){this.buildCache(),this.bindEvents()},destroy:function(){this.unbindEvents(),this.$element.removeData()},buildCache:function(){this.$element=r(this.element)},bindEvents:function(){var t=this;switch(this.options.fireEvent){case r.fn.brokk.fireEvents.ON_READY:r(e).ready(function(){t.fire()});break;case r.fn.brokk.fireEvents.ON_CLICK:t.$element.on("click."+t._name,function(){r(this).prop("disabled")||t.fire()});break;case r.fn.brokk.fireEvents.ON_SUBMIT:t.$element.on("submit."+t._name,function(n){r(this)[0].checkValidity()&&(n.preventDefault(),t.fire())});break;case r.fn.brokk.fireEvents.MANUAL:}t.$element.on("click."+t._name,function(){t.callback(t.options.onClick)}),t.$element.on("submit."+t._name,function(n){n.preventDefault(),t.callback(t.options.onSubmit)})},unbindEvents:function(){this.$element.off("."+this._name)},callback:function(n,t){"function"==typeof n&&n.call(this,t)},fire:function(){var t=this;this.callback(this.options.before),null!==this.options.requestUrl?r.ajax({url:this.options.requestUrl,type:this.options.requestMethod,dataType:"json",data:this.options.requestParams,success:function(n){t.callback(t.options.onSuccess,{data:n})},error:function(n){t.callback(t.options.onError,{xhr:n})}}).always(function(){t.callback(t.options.onComplete)}):console.warn("No requestUrl defined.")},fireSuccessElements:function(n){this.options.toFireSuccessElements.forEach(function(n){r(n).data("plugin_"+t)&&r(n).brokkApi().fire()})},before:function(n){this.options.triggerElements.forEach(function(n){r(n).prop("disabled",!0),r(n).addClass("disabled")}),this.options.showOverlay&&this.options.toUpdateElements.forEach(function(n){0===r(n).find("#brokk-loading").length&&r(n).append('<span id="brokk-loading">'+r.fn.brokk.loadingTemplate+"</span>")})},onSuccess:function(t){this.options.toUpdateElements.forEach(function(n){r(n).html(t.data)}),this.fireSuccessElements()},onError:function(n){},onComplete:function(n){this.options.triggerElements.forEach(function(n){r(n).prop("disabled",!1),r(n).removeClass("disabled")}),this.options.toUpdateElements.forEach(function(n){r(n).find("#brokk-loading").remove()})},onClick:function(n){},onSubmit:function(n){}}),r.fn.brokk=function(n){return this.each(function(){r.data(this,"plugin_"+t)||r.data(this,"plugin_"+t,new i(this,n))})},r.fn.brokkApi=function(){return void 0!==this[0]?r.data(this[0],"plugin_"+t):(console.warn("This element was not initialized with Brokk."),new i(this[0],{}))},r.fn.brokk.loadingTemplate="Loading",r.fn.brokk.fireEvents={ON_READY:"onReady",ON_CLICK:"onClick",ON_SUBMIT:"onSubmit",MANUAL:"manual"},r.fn.brokk.defaults={requestUrl:null,requestMethod:"GET",requestParams:null,fireEvent:r.fn.brokk.fireEvents.ON_READY,toUpdateElements:[],triggerElements:[],toFireSuccessElements:[],showOverlay:!0,before:function(n){this.before(n)},onSuccess:function(n){this.onSuccess(n)},onError:function(n){this.onError(n)},onComplete:function(n){this.onComplete(n)},onClick:function(n){this.onClick(n)},onSubmit:function(n){this.onSubmit(n)}}}(jQuery,window,document);