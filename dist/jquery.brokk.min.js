/*! brokkjs 2023-04-28 */

!function(r,t,n){var e="brokkJS";function i(i,t){this.element=i,this._name=e,this._defaults=r.fn.brokk.defaults;var o={},s=["toUpdateElements","triggerElements","toFireSuccessElements"];r.each(this._defaults,function(t,e){if("function"!=typeof e){var n=t.replace(/([a-z])([A-Z])/g,"$1-$2").toLowerCase();e=r(i).data("brokk-"+n),-1!==s.indexOf(t)&&"string"==typeof e&&(e=e.split(",").map(function(t){return"this"===t.trim()?i:t})),o[t]=e}}),this.options=r.extend({},this._defaults,o),this.options=r.extend({},this.options,t),this.init()}r.extend(i.prototype,{init:function(){this.buildCache(),this.bindEvents()},destroy:function(){this.unbindEvents(),this.$element.removeData()},buildCache:function(){this.$element=r(this.element)},bindEvents:function(){var e=this;switch(this.options.fireEvent){case r.fn.brokk.fireEvents.ON_READY:r(n).ready(function(){e.fire()});break;case r.fn.brokk.fireEvents.ON_CLICK:e.$element.on("click."+e._name,function(){r(this).prop("disabled")||e.fire()});break;case r.fn.brokk.fireEvents.ON_SUBMIT:e.$element.on("submit."+e._name,function(t){r(this)[0].checkValidity()&&(t.preventDefault(),e.fire())});break;case r.fn.brokk.fireEvents.MANUAL:}e.$element.on("click."+e._name,function(){e.callback(e.options.onClick)}),e.$element.on("submit."+e._name,function(t){t.preventDefault(),e.callback(e.options.onSubmit)})},unbindEvents:function(){this.$element.off("."+this._name)},callback:function(t,e){"function"==typeof t&&t.call(this,e)},fire:function(){var e=this;this.callback(this.options.before),null!==this.options.requestUrl?r.ajax({url:this.options.requestUrl,type:this.options.requestMethod,dataType:"json",data:this.options.requestParams,success:function(t){e.callback(e.options.onSuccess,{data:t})},error:function(t){e.callback(e.options.onError,{xhr:t})}}).always(function(){e.callback(e.options.onComplete)}):console.warn("No requestUrl defined.")},fireSuccessElements:function(t){this.options.toFireSuccessElements.forEach(function(t){r(t).data("plugin_"+e)&&r(t).brokkApi().fire()})},before:function(t){var e=this.options.triggerElementsOverlay;if(this.options.triggerElements.forEach(function(t){r(t).prop("disabled",!0),r(t).addClass("disabled"),r(t).data("brokk-html",r(t).html()),null!=e&&r(t).html('<span id="brokk-trigger-overlay">'+e+"</span>")}),this.options.toUpdateElementsOverlay){var n=this.options.toUpdateElementsOverlay;this.options.toUpdateElements.forEach(function(t){0===r(t).find("#brokk-update-overlay").length&&r(t).append('<span id="brokk-update-overlay">'+n+"</span>")})}},onSuccess:function(e){this.options.toUpdateElements.forEach(function(t){r(t).html(e.data)}),this.fireSuccessElements()},onError:function(t){},onComplete:function(t){this.options.triggerElements.forEach(function(t){r(t).prop("disabled",!1),r(t).removeClass("disabled"),r(t).html(r(t).data("brokk-html"))}),this.options.toUpdateElements.forEach(function(t){r(t).find("#brokk-update-overlay").remove()})},onClick:function(t){},onSubmit:function(t){}}),r.fn.brokk=function(t){return this.each(function(){r.data(this,"plugin_"+e)||r.data(this,"plugin_"+e,new i(this,t))})},r.fn.brokkApi=function(){return void 0!==this[0]?r.data(this[0],"plugin_"+e):(console.warn("This element was not initialized with Brokk."),new i(this[0],{}))},r.fn.brokk.fireEvents={ON_READY:"onReady",ON_CLICK:"onClick",ON_SUBMIT:"onSubmit",MANUAL:"manual"},r.fn.brokk.defaults={requestUrl:null,requestMethod:"GET",requestParams:null,fireEvent:r.fn.brokk.fireEvents.ON_READY,toUpdateElements:[],toUpdateElementsOverlay:"Loading",triggerElements:[],triggerElementsOverlay:null,toFireSuccessElements:[],before:function(t){this.before(t)},onSuccess:function(t){this.onSuccess(t)},onError:function(t){this.onError(t)},onComplete:function(t){this.onComplete(t)},onClick:function(t){this.onClick(t)},onSubmit:function(t){this.onSubmit(t)}}}(jQuery,window,document);